apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: submit-flink-job
spec:
  template:
    metadata:
      name: {{ .PlanName }}-job
    spec:
      restartPolicy: OnFailure
      containers:
        - env:
            - name: DOWNLOAD_URL
              value: {{ .Params.download_url }}
            - name: JOBMANAGER
              value: flink-jobmanager
          name: {{ .PlanName }}
          image: bash
          imagePullPolicy: Always
          command:
            - "/usr/local/bin/bash"
          args: ['-c',
                 'export JOB_FILENAME=$(basename $DOWNLOAD_URL); echo "DOWNLOAD_URL: $DOWNLOAD_URL FILE: $JOB_FILENAME JOBMANAGER: $JOBMANAGER"; apk add --no-cache jq curl;
              curl -s $DOWNLOAD_URL -o $JOB_FILENAME;
              curl -s -X POST -H "Expect:" -F "jarfile=@$JOB_FILENAME" $JOBMANAGER:8081/jars/upload;
              while true; do date; export JAR_ID=$(curl -s $JOBMANAGER:8081/jars | jq -r ".files[].id");
              if [ -z $JAR_ID ];
              then
              echo "No uploaded jar detected";
              else
              echo "Found jar $JAR_ID";
              export SUBMIT_MSG=$(curl -s -X POST -H "Expect:" $JOBMANAGER:8081/jars/$JAR_ID/run?program-args=--kafka_host%20kafka-kafka-1.kafka-svc.default.svc.cluster.local:9093 | jq -r ".errors");
              echo "RESPONSE: $SUBMIT_MSG";
              if [ $SUBMIT_MSG == "null" ];
              then
              echo "SUBMITTED JOB!";
              exit 0;
              else
              echo "Failed to submit job: $SUBMIT_MSG";
              fi;
              fi;
              echo "=====================";
              sleep 5; done;']
