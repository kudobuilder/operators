{{ $auth_params := "" }}
{{ if .Params.AUTHENTICATION_SECRET_NAME }}
{{ $auth_params = "-u $(cat /etc/cassandra/authentication/username) -pwf <(paste -d ' ' /etc/cassandra/authentication/username /etc/cassandra/authentication/password)" }}
{{ end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Name }}-node-scripts
  namespace: {{ .Namespace }}
data:
  node-drain.sh: |
    {{ if ne $.Params.JMX_LOCAL_ONLY "true" }}
    nodetool {{ $auth_params }} --ssl drain
    {{ else }}
    nodetool {{ $auth_params }} drain
    {{ end }}
  node-readiness-probe.sh: |
    IS_NATIVE_TRANSPORT_RUNNING=`curl -s localhost:{{ $.Params.JOLOKIA_PORT }}/jolokia/read/org.apache.cassandra.db:type=StorageService/NativeTransportRunning | jq .value`
    IS_NODE_LIVE=`curl -s localhost:{{ $.Params.JOLOKIA_PORT }}/jolokia/read/org.apache.cassandra.db:type=StorageService/LiveNodes | jq .value | grep -E ${POD_IP}`
    echo "Native Transport Running: $IS_NATIVE_TRANSPORT_RUNNING, Live Node: $IS_NODE_LIVE (Expecting ${POD_IP})"
    [[ $IS_NATIVE_TRANSPORT_RUNNING == "true" ]] && [[ $IS_NODE_LIVE != "" ]]
  node-liveness-probe.sh: |
    DEADLOCKED_THREADS=`curl -s localhost:{{ $.Params.JOLOKIA_PORT }}/jolokia/exec/java.lang:type=Threading/findDeadlockedThreads | jq .value`
    echo "Deadlocked Threads: $DEADLOCKED_THREADS"
    [[ $DEADLOCKED_THREADS == "null" ]]
  generate-rackdc-properties.sh: |
    # Generate the rackdc-properties
    RACK=`kubectl get node -L$RACKLABEL | grep ${NODE_NAME} | awk '{print $6}'`
    cat <<EOF > /etc/cassandra/cassandra-rackdc.properties
    dc=$CASSANDRA_DATACENTER
    rack=$RACK
    EOF
  node-token-save.sh: |
    # Used to capture the token map from a newly created cluster and save it
    # Not used at the moment
    if [ ! -f /var/lib/cassandra/token_map ]; then
        while [ -z $NODE_TOKENS ]; do
            NODE_ID=`nodetool info | grep ID | sed -n -e 's/ID[[:space:]]*\:[[:space:]]*\(.*\)$/\1/p'`
            NODE_IP=`nodetool status | grep $NODE_ID | sed -n -e 's/UN[[:space:]]*\([0-9.]*\)[[:space:]]*.*/\1/p'`
            NODE_TOKENS=`nodetool ring | grep $NODE_IP | awk '{ print $8 }' ORS=',' | sed 's/,$//'`
            echo $NODE_TOKENS > /var/lib/cassandra/token_map
        done
    fi
  restore-capture-tokenmap.sh: |
    # Used as a start command for medusa restore to redirect the passed in token map for the actual startup
    if [ ! -z "$JVM_OPTS" ]; then
      echo "$JVM_OPTS" | sed -n -e 's/-Dcassandra.initial_token=\([-0-9,]*\)[[:space:]].*/\1/p' > /var/lib/cassandra/token_map
    fi
  prepare-medusa-ini.sh: |
    # Adds JMX username and password_file to medusa config.
    # Expects the original medusa config /etc/medusa/medusa.init.orig
    # Expects JMX credentials in /etc/cassandra/authentication/username|password
    cp /etc/medusa/medusa.ini.orig /etc/medusa/medusa.ini;
    {{ if .Params.AUTHENTICATION_SECRET_NAME }}
    echo `paste -d ' ' /etc/cassandra/authentication/username /etc/cassandra/authentication/password` > /etc/medusa/nodetool_password_file;
    sed -i "/nodetool_password_file_path/c\\nodetool_password_file_path = /etc/medusa/nodetool_password_file" /etc/medusa/medusa.ini;
    sed -i "/nodetool_username/c\\nodetool_username = $(cat /etc/cassandra/authentication/username)" /etc/medusa/medusa.ini;
    sed -i "/cql_username/c\\cql_username = $(cat /etc/cassandra/authentication/username)" /etc/medusa/medusa.ini;
    sed -i "/cql_password/c\\cql_password = $(cat /etc/cassandra/authentication/password)" /etc/medusa/medusa.ini;
    {{ end }}
  init-container-restore.sh: |
    # Used to restore data in the init container of medusa
    DATA_DIR=/var/lib/cassandra/data
    if [ ! -d ${DATA_DIR} ] || [ -z "$(ls -A -- "${DATA_DIR}")" ]; then
      FQDN="{{ .Params.RESTORE_OLD_NAME }}-node-$POD_ID.{{ .Params.RESTORE_OLD_NAME }}-svc.{{ .Params.RESTORE_OLD_NAMESPACE }}.svc.cluster.local"
      echo "Start Restore for node '${FQDN}' from backup '{{ .Params.BACKUP_NAME }}' in prefix '{{ .Params.BACKUP_PREFIX }}'";
      mkdir -p ${DATA_DIR};
      /usr/local/bin/medusa --fqdn ${FQDN} restore-node --backup-name {{ .Params.BACKUP_NAME }}
    else
      echo "Skip Restore, the data directory for cassandra is not empty"
    fi
  wait-for-node-zero.sh: |
    # With parallel startup of all nodes, we still need to make sure that the first node is reachable for all others, otherwise
    # we may end up with separate clusters. So every node except node-0 waits for node-0 to be reachable
    {{- if .Params.NODE_TOPOLOGY }}
    NODE_ZERO={{ $.Name }}-{{ (index $.Params.NODE_TOPOLOGY 0).datacenter }}-node-0
    {{- else }}
    NODE_ZERO={{ $.Name }}-node-0
    {{- end }}
    echo "Testing if node $NODE_ZERO is reachable...";
    if [ "$POD_NAME" != "$NODE_ZERO" ]; then
      while :; do cqlsh $NODE_ZERO.{{ $.Name }}-svc.{{ $.Namespace }}.svc.cluster.local -e "SELECT uuid() FROM system.local" > /dev/null 2>&1 && break; echo "Waiting for '$NODE_ZERO.{{ $.Name }}-svc.{{ $.Namespace }}.svc.cluster.local' to be available..."; sleep 5; done;
    fi;
